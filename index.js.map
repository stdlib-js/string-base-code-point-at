{"version":3,"file":"index.js","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// Factors for converting individual surrogates...\nvar Ox10000 = 0x10000|0; // 65536\nvar Ox400 = 0x400|0; // 1024\n\n// Range for a high surrogate\nvar OxD800 = 0xD800|0; // 55296\nvar OxDBFF = 0xDBFF|0; // 56319\n\n// Range for a low surrogate\nvar OxDC00 = 0xDC00|0; // 56320\nvar OxDFFF = 0xDFFF|0; // 57343\n\n\n// MAIN //\n\n/**\n* Returns a Unicode code point from a string at a specified position.\n*\n* ## Notes\n*\n* -   UTF-16 encoding uses one 16-bit unit for non-surrogates (U+0000 to U+D7FF and U+E000 to U+FFFF).\n* -   UTF-16 encoding uses two 16-bit units (surrogate pairs) for U+10000 to U+10FFFF and encodes U+10000-U+10FFFF by subtracting 0x10000 from the code point, expressing the result as a 20-bit binary, and splitting the 20 bits of 0x0-0xFFFFF as upper and lower 10-bits. The respective 10-bits are stored in two 16-bit words: a high and a low surrogate.\n*\n*\n* @param {string} str - input string\n* @param {integer} idx - position\n* @param {boolean} backward - backward iteration for low surrogates\n* @returns {NonNegativeInteger} code point\n*\n* @example\n* var out = codePointAt( 'last man standing', 4, false );\n* // returns 32\n*\n* @example\n* var out = codePointAt( 'presidential election', 8, true );\n* // returns 116\n*\n* @example\n* var out = codePointAt( '‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶', 2, false );\n* // returns 2369\n*\n* @example\n* var out = codePointAt( 'üå∑', 1, true );\n* // returns 127799\n*/\nfunction codePointAt( str, idx, backward ) {\n\tvar code;\n\tvar low;\n\tvar hi;\n\n\tif ( idx < 0 ) {\n\t\tidx += str.length;\n\t}\n\tcode = str.charCodeAt( idx );\n\n\t// High surrogate\n\tif ( code >= OxD800 && code <= OxDBFF && idx < str.length - 1 ) {\n\t\thi = code;\n\t\tlow = str.charCodeAt( idx+1 );\n\t\tif ( OxDC00 <= low && low <= OxDFFF ) {\n\t\t\treturn ( ( hi - OxD800 ) * Ox400 ) + ( low - OxDC00 ) + Ox10000;\n\t\t}\n\t\treturn hi;\n\t}\n\t// Low surrogate - support only if backward iteration is desired\n\tif ( backward ) {\n\t\tif ( code >= OxDC00 && code <= OxDFFF && idx >= 1 ) {\n\t\t\thi = str.charCodeAt( idx-1 );\n\t\t\tlow = code;\n\t\t\tif ( OxD800 <= hi && hi <= OxDBFF ) {\n\t\t\t\treturn ( ( hi - OxD800 ) * Ox400 ) + ( low - OxDC00 ) + Ox10000;\n\t\t\t}\n\t\t\treturn low;\n\t\t}\n\t}\n\treturn code;\n}\n\n\n// EXPORTS //\n\nexport default codePointAt;\n"],"names":["OxD800","OxDC00","str","idx","backward","code","low","hi","length","charCodeAt"],"mappings":";yCAuBA,IAIIA,EAAS,MAITC,EAAS,aAoCb,SAAsBC,EAAKC,EAAKC,GAC/B,IAAIC,EACAC,EACAC,EAQJ,OANKJ,EAAM,IACVA,GAAOD,EAAIM,SAEZH,EAAOH,EAAIO,WAAYN,KAGVH,GAAUK,GAlDX,OAkD6BF,EAAMD,EAAIM,OAAS,GAC3DD,EAAKF,EACLC,EAAMJ,EAAIO,WAAYN,EAAI,GACrBF,GAAUK,GAAOA,GAjDX,MARD,MA0DEC,EAAKP,IAAuBM,EAAML,GA3DlC,MA6DLM,GAGHH,GACCC,GAAQJ,GAAUI,GAxDZ,OAwD8BF,GAAO,GAC/CI,EAAKL,EAAIO,WAAYN,EAAI,GACzBG,EAAMD,EACDL,GAAUO,GAAMA,GA/DX,MAJD,MAoEGA,EAAKP,IAAuBM,EAAML,GArEnC,MAuEJK,GAGFD,CACR"}